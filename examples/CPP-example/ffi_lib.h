/* Generated with cbindgen:0.26.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdarg>
#include <cstdint>
#include <cstdlib>
#include <ostream>
#include <new>

namespace ffi {

enum class FFIError {
  Ok = 0,
  Null = 100,
  Panic = 200,
  Fail = 300,
};

/// A basic vector 3 in our FFI layer using integers.
struct Vec3 {
  int32_t x;
  int32_t y;
  int32_t z;

  Vec3(int32_t const& x,
       int32_t const& y,
       int32_t const& z)
    : x(x),
      y(y),
      z(z)
  {}

  bool operator==(const Vec3& other) const {
    return x == other.x &&
           y == other.y &&
           z == other.z;
  }
  bool operator!=(const Vec3& other) const {
    return x != other.x ||
           y != other.y ||
           z != other.z;
  }
};

#if defined(DEFINE_INTEROPTOPUS)
/// A simple type in our FFI layer.
struct Vec2 {
  float x;
  float y;

  Vec2(float const& x,
       float const& y)
    : x(x),
      y(y)
  {}

  bool operator==(const Vec2& other) const {
    return x == other.x &&
           y == other.y;
  }
  bool operator!=(const Vec2& other) const {
    return x != other.x ||
           y != other.y;
  }
};
#endif

#if defined(DEFINE_INTEROPTOPUS)
struct SimpleService {

};
#endif

#if defined(DEFINE_INTEROPTOPUS)
struct Vec4 {
  float x;
  float y;
  float z;
  float w;

  Vec4(float const& x,
       float const& y,
       float const& z,
       float const& w)
    : x(x),
      y(y),
      z(z),
      w(w)
  {}

  bool operator==(const Vec4& other) const {
    return x == other.x &&
           y == other.y &&
           z == other.z &&
           w == other.w;
  }
  bool operator!=(const Vec4& other) const {
    return x != other.x ||
           y != other.y ||
           z != other.z ||
           w != other.w;
  }
};
#endif

using namespace ffi;

extern "C" {

void init_logger();

Vec3 *vec3_new(int32_t x, int32_t y, int32_t z);

void benchmark_rust();

#if defined(DEFINE_INTEROPTOPUS)
/// Function using the type.
Vec2 my_function(Vec2 input);
#endif

#if defined(DEFINE_INTEROPTOPUS)
void hello(const char *name);
#endif

#if defined(DEFINE_INTEROPTOPUS)
FFIError simple_service_new_with(SimpleService **context, uint32_t _some_value);
#endif

#if defined(DEFINE_INTEROPTOPUS)
/// Destroys the given instance.
///
/// # Safety
///
/// The passed parameter MUST have been created with the corresponding init function;
/// passing any other value results in undefined behavior.
FFIError simple_service_destroy(SimpleService **context);
#endif

#if defined(DEFINE_INTEROPTOPUS)
FFIError vec4_new(Vec4 **context, float x, float y, float z, float w);
#endif

#if defined(DEFINE_INTEROPTOPUS)
float vec4_dot(const Vec4 *context, const Vec4 *other);
#endif

#if defined(DEFINE_INTEROPTOPUS)
/// Destroys the given instance.
///
/// # Safety
///
/// The passed parameter MUST have been created with the corresponding init function;
/// passing any other value results in undefined behavior.
FFIError vec4_destroy(Vec4 **context);
#endif

void benchmark_rust_async();

int32_t add(Vec3 *slf, int32_t x, int32_t y, int32_t z);

int32_t add_reverse_args(int32_t x, int32_t y, int32_t z, Vec3 *slf);

int32_t dot(Vec3 *slf, const Vec3 *other);

Vec3 cross(Vec3 *slf, const Vec3 *other);

Vec3 normalize(Vec3 *slf);

} // extern "C"

} // namespace ffi
