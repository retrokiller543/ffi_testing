// Automatically generated by Interoptopus.

#ifndef ffi_lib
#define ffi_lib

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>




typedef struct simpleservice simpleservice;

typedef struct vec4 vec4;

typedef enum ffierror
    {
    FFIERROR_OK = 0,
    FFIERROR_NULL = 100,
    FFIERROR_PANIC = 200,
    FFIERROR_FAIL = 300,
    } ffierror;

/// A simple type in our FFI layer.
typedef struct vec2
    {
    float x;
    float y;
    } vec2;

/// A basic vector 3 in our FFI layer using integers.
typedef struct vec3
    {
    int x;
    int y;
    int z;
    } vec3;


/// Function using the type.
vec2 my_function(vec2 input);

vec3* vec3_new(int x, int y, int z);

int add(vec3* slf, int x, int y, int z);

int add_reverse_args(int x, int y, int z, vec3* slf);

int dot(vec3* slf, const vec3* other);

vec3 cross(vec3* slf, const vec3* other);

vec3 normalize(vec3* slf);

void hello(const char* name);

void benchmark_rust();

void benchmark_rust_async();

/// Destroys the given instance.
///
/// # Safety
///
/// The passed parameter MUST have been created with the corresponding init function;
/// passing any other value results in undefined behavior.
ffierror simple_service_destroy(simpleservice** context);

ffierror simple_service_new_with(simpleservice** context, unsigned int some_value);

/// Destroys the given instance.
///
/// # Safety
///
/// The passed parameter MUST have been created with the corresponding init function;
/// passing any other value results in undefined behavior.
ffierror vec4_destroy(vec4** context);

ffierror vec4_new(vec4** context, float x, float y, float z, float w);

float vec4_dot(const vec4* context, const vec4* other);

void init_logger();

#ifdef __cplusplus
class SimpleService
{
    private:
    void* _context;

    SimpleService() : _context(nullptr) {}

    static SimpleService NewWith(unsigned int some_value)
    {
        var self = new SimpleService();
        ffierror rval = simple_service_new_with(this._context, some_value);
        if (rval != ffierror.OK)
        {
            throw new InteropException<ffierror>(rval);
        }
        return self;
    }

    void Dispose()
    {
        ffierror rval = simple_service_destroy(_context);
        if (rval != ffierror.OK)
        {
            throw new InteropException<ffierror>(rval);
        }
    }

    void* Context() const { return _context; }
private:
    explicit SimpleService(void* context) : _context(context) {}
public:
    static SimpleService FromContext(void* context) { return SimpleService(context); }
};
#endif /* __cplusplus */


class Vec4
{
    private:
    void* _context;

    Vec4() : _context(nullptr) {}

    static Vec4 New(float x, float y, float z, float w)
    {
        var self = new Vec4();
        ffierror rval = vec4_new(this._context, x, y, z, w);
        if (rval != ffierror.OK)
        {
            throw new InteropException<ffierror>(rval);
        }
        return self;
    }

    void Dispose()
    {
        ffierror rval = vec4_destroy(_context);
        if (rval != ffierror.OK)
        {
            throw new InteropException<ffierror>(rval);
        }
    }

    float Dot(const vec4* other)
    {
        return vec4_dot(_context, other);
    }

    void* Context() const { return _context; }
private:
    explicit Vec4(void* context) : _context(context) {}
public:
    static Vec4 FromContext(void* context) { return Vec4(context); }
};



#ifdef __cplusplus
}
#endif

#endif /* ffi_lib */
