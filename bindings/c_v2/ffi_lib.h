// Automatically generated by Interoptopus.

#ifndef ffi_lib
#define ffi_lib

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>




typedef struct simpleservice simpleservice;

/// A basic vector 3 in our FFI layer using integers.
typedef struct vec3 vec3;

typedef struct vec4 vec4;

typedef enum ffierror
    {
    FFIERROR_OK = 0,
    FFIERROR_NULL = 100,
    FFIERROR_PANIC = 200,
    FFIERROR_FAIL = 300,
    } ffierror;

/// A simple type in our FFI layer.
typedef struct vec2
    {
    float x;
    float y;
    } vec2;

/// The basic struct we will call methods in our FFI layer.
typedef struct vec3
    {
    int32_t x;
    int32_t y;
    int32_t z;
    } vec3;


/// Function using the type.
vec2 my_function(vec2 input);

void hello(const int8_t* name);

double benchmark_rust();

double benchmark_rust_async();

/// Destroys the given instance.
///
/// # Safety
///
/// The passed parameter MUST have been created with the corresponding init function;
/// passing any other value results in undefined behavior.
ffierror simple_service_destroy(simpleservice** context);

ffierror simple_service_new_with(simpleservice** context, uint32_t some_value);

/// Destroys the given instance.
///
/// # Safety
///
/// The passed parameter MUST have been created with the corresponding init function;
/// passing any other value results in undefined behavior.
ffierror vec4_destroy(vec4** context);

ffierror vec4_new(vec4** context, float x, float y, float z, float w);

float vec4_dot(const vec4* context, const vec4* other);

float vec4_get_x(const vec4* context);

float vec4_get_y(const vec4* context);

float vec4_get_z(const vec4* context);

float vec4_get_w(const vec4* context);

void vec4_set_x(vec4* context, float value);

void vec4_set_y(vec4* context, float value);

void vec4_set_z(vec4* context, float value);

void vec4_set_w(vec4* context, float value);

void init_logger();

/// Destroys the given instance.
///
/// # Safety
///
/// The passed parameter MUST have been created with the corresponding init function;
/// passing any other value results in undefined behavior.
ffierror vec3_destroy(vec3** context);

ffierror vec3_new(vec3** context, int32_t x, int32_t y, int32_t z);

int32_t vec3_add(vec3* context, int32_t x, int32_t y, int32_t z);

int32_t vec3_add_reverse_args(vec3* context, int32_t x, int32_t y, int32_t z);

int32_t vec3_dot(const vec3* context, const vec3* other);

vec3 vec3_cross(const vec3* context, const vec3* other);

vec3 vec3_normalize(const vec3* context);

int32_t vec3_get_x(const vec3* context);

int32_t vec3_get_y(const vec3* context);

int32_t vec3_get_z(const vec3* context);


#ifdef __cplusplus
}
#endif

#endif /* ffi_lib */
